//! `Identifiable` trait for any Rust data structure that can have an id.

/// Type id of the bool true value.
pub const BOOL_TRUE_ID: i32 = -1720552011;
/// Type id of the bool false value.
pub const BOOL_FALSE_ID: i32 = -1132882121;
/// Type id of the int type.
pub const INT_ID: i32 = -1471112230;
/// Type id of the long type.
pub const LONG_ID: i32 = 570911930;
/// Type id of the double type.
pub const DOUBLE_ID: i32 = 571523412;
/// Type id of the string type.
pub const STRING_ID: i32 = -1255641564;
/// Type id of the vector type.
pub const VECTOR_ID: i32 = 481674261;


/// A trait for a Rust data structure that can have an id.
pub trait Identifiable {
    /// Get id of a value of an identifiable type.
    ///
    /// Its signature is made `(&self) -> i32`, not `() -> i32` because of enum
    /// types where different enum variants can have different ids.
    fn type_id(&self) -> i32;

    /// Get enum variant_hint for a value of an identifiable type.
    ///
    /// This method is purely for assisting `de::Deserializer` to deserialize
    /// enum types because `Deserialize` implementations generated by
    /// `#[derive(Deserialize)]` call `Deserializer::deserialize_identifier()`
    /// to identify an enum variant.
    fn enum_variant_id(&self) -> Option<&'static str>;
}


impl<'a, T: Identifiable> Identifiable for &'a T {
    fn type_id(&self) -> i32 {
        (*self).type_id()
    }

    fn enum_variant_id(&self) -> Option<&'static str> {
        (*self).enum_variant_id()
    }
}

impl Identifiable for bool {
    fn type_id(&self) -> i32 {
        match *self {
            false => BOOL_FALSE_ID,
            true => BOOL_TRUE_ID,
        }
    }

    // Doesn't really serve any purpose here, but implement anyway for completeness
    fn enum_variant_id(&self) -> Option<&'static str> {
        match *self {
            false => Some("false"),
            true  => Some("true"),
        }
    }
}


macro_rules! impl_identifiable_for_primitives {
    ($($type:ty => $id_value:expr,)*) => {
        $(
            impl Identifiable for $type {
                fn type_id(&self) -> i32 {
                    $id_value
                }

                fn enum_variant_id(&self) -> Option<&'static str> {
                    None
                }
            }
        )*
    };
}

impl_identifiable_for_primitives! {
    i8  => INT_ID,
    i16 => INT_ID,
    i32 => INT_ID,
    i64 => LONG_ID,

    u8  => INT_ID,
    u16 => INT_ID,
    u32 => INT_ID,
    u64 => LONG_ID,

    f32 => DOUBLE_ID,
    f64 => DOUBLE_ID,

    String => STRING_ID,
}

impl<'a> Identifiable for &'a str {
    fn type_id(&self) -> i32 {
        STRING_ID
    }

    fn enum_variant_id(&self) -> Option<&'static str> {
        None
    }
}

impl<T> Identifiable for Vec<T> {
    fn type_id(&self) -> i32 {
        VECTOR_ID
    }

    fn enum_variant_id(&self) -> Option<&'static str> {
        None
    }
}
